#include <ctime>

#include "../../src/Simulator.h"
// #include "definitions.h"



// takes 10 minutes currently
int main() {
    tree tree_("../trees/test.tree");
    std::time_t t1 = 42;//std::time(0);
    vector<DiscreteDistribution*> insertionDists(tree_.getNodesNum() - 1);
    vector<DiscreteDistribution*> deletionDists(tree_.getNodesNum() - 1);

    // Zipf distribution with 'a' paramater of 1.7
    DiscreteDistribution d1({0.2616367127348447, 0.11465434983030369, 0.07076095826900884, 0.05024378955690392, 0.038524137871570774, 0.0310088426769244, 0.025810745050582732, 0.02201781609485196, 0.01913765527326, 0.01688203438373837, 0.0150714885355518, 0.013588684320904357, 0.012353811822857032, 0.011310775775605332, 0.010419045873896256, 0.009648639759500555, 0.008976921827021611, 0.008386496679675963, 0.007863785228321476, 0.007398039273035755, 0.006980645163766702, 0.006604622497186847, 0.006264257146264973, 0.005954828546716552, 0.005672404240347806, 0.005413683147406988, 0.005175874639314243, 0.004956604251264418, 0.0047538394523566774, 0.004565830681928564, 0.004391064122557412, 0.004228223580738419, 0.004076159496763139, 0.003933863580520177, 0.00380044792071792, 0.003675127676507417, 0.003557206657189674, 0.0034460652449493493, 0.003341150229732088, 0.003241966213390671, 0.00314806830855364, 0.0030590559110825173, 0.002974567367006779, 0.0028942753880912245, 0.0028178830966770273, 0.002745120601644034, 0.0026757420244102642, 0.0026095229076916566, 0.002546257950967817, 0.002485759025763512, 0.0024278534313714197, 0.0023723823578316785, 0.0023191995281023965, 0.002268169995604361, 0.0022191690768635377, 0.0021720814019352856, 0.0021268000677780894, 0.0020832258818355522, 0.002041266684851189, 0.002000836743436324, 0.001961856204182164, 0.0019242506021898322, 0.0018879504178171444, 0.0018528906762332925, 0.0018190105850531216, 0.0017862532059085689, 0.001754565156320493, 0.0017238963386715218, 0.0016941996934597718, 0.0016654309743428118, 0.0016375485427681477, 0.0016105131802368606, 0.001584287916465888, 0.0015588378719061657, 0.0015341301132421074, 0.001510133520645835, 0.0014868186656898795, 0.0014641576989370434, 0.00144212424632772, 0.0014206933135749316, 0.0013998411978570903, 0.001379545406169337, 0.0013597845797572877, 0.001340538424113149, 0.0013217876440642057, 0.0013035138835283955, 0.0012856996695516845, 0.0012683283602777616, 0.001251384096532717, 0.0012348517567361994, 0.0012187169148764946, 0.0012029658013103137, 0.0011875852661691311, 0.001172562745172887, 0.0011578862276690426, 0.0011435442267304717, 0.0011295257511597318, 0.0011158202792599754, 0.0011024177342443243, 0.0010893084611660008, 0.0010764832052610658, 0.0010639330916042715, 0.00105164960598645, 0.0010396245769290643, 0.001027850158758118, 0.0010163188156656353, 0.0010050233066924003, 0.000993956671570682, 0.0009831122173702615, 0.0009724835058953037, 0.0009620643417834695, 0.0009518487612622335, 0.0009418310215206187, 0.0009320055906575655, 0.0009223671381709144, 0.000912910525953517, 0.0009036307997653378, 0.0008945231811525629, 0.0008855830597867328, 0.0008768059861987476, 0.0008681876648843007, 0.000859723947758868, 0.0008514108279418321, 0.0008432444338506742, 0.000835221023587408, 0.0008273369796005949, 0.0008195888036073478, 0.0008119731117607296, 0.0008044866300488807, 0.0007971261899130657, 0.0007898887240726339, 0.0007827712625456296, 0.0007757709288544835, 0.0007688849364068613, 0.0007621105850423454, 0.0007554452577361905, 0.0007488864174519126, 0.0007424316041349658, 0.0007360784318402089, 0.0007298245859862991, 0.0007236678207305424, 0.0007176059564581071, 0.0007116368773798514, 0.000705758529233348, 0.000699968917081991, 0.0006942661032073554, 0.000688648205090256, 0.0006831133934761932, 0.000677659890521121, 0.000672285968013687});

    std::cout << tree_.getNodesNum() << "\n";
    // d1.setSeed(t1);
    fill(insertionDists.begin(), insertionDists.end(), &d1);
    fill(deletionDists.begin(), deletionDists.end(), &d1);

    vector<double> insertionRates(tree_.getNodesNum() - 1);
    vector<double> deletionRates(tree_.getNodesNum() - 1);

    fill(insertionRates.begin(), insertionRates.end(), 0.05051569355828528);
    fill(deletionRates.begin(), deletionRates.end(), 0.05051569355828528);

    SimulationProtocol protocol(&tree_);
    protocol.setSeed(t1);

    // vector<vector<double>> IRs = {}
    // vector<vector<double>> DRs = {}


    protocol.setInsertionLengthDistributions(insertionDists);
    protocol.setDeletionLengthDistributions(deletionDists);
    protocol.setInsertionRates(insertionRates);
    protocol.setDeletionRates(deletionRates);

    int rootLength = 92;
    protocol.setSequenceSize(rootLength);


    Simulator sim(&protocol);
    modelFactory mFac(&tree_);

    mFac.setAlphabet(alphabetCode::AMINOACID);
    mFac.setReplacementModel(modelCode::WAG);
    // mFac.setModelParameters({0.25,0.25,0.25,0.25,0.1,0.2,0.3,0.4,0.5,0.6});
    mFac.setGammaParameters(1.0, 1);
    // mFac.setInvariantSitesProportion(0.5);
    if (!mFac.isModelValid()) return 0;
    sim.initSubstitionSim(mFac);
    // sim.setSaveRoot();
    auto saveList = sim.getNodesSaveList();


    size_t counter = 0;
    while (counter++ < 100000) {
        protocol.setInsertionLengthDistributions(insertionDists);
        protocol.setDeletionLengthDistributions(deletionDists);
        protocol.setInsertionRates(insertionRates);
        protocol.setDeletionRates(deletionRates);
        protocol.setSequenceSize(rootLength);

        auto blockmap = sim.generateSimulation();


        auto msa = MSA(blockmap, tree_.getRoot(), saveList);
        int msaLength = msa.getMSAlength();
        // std::cout << msaLength << "\n";
        
        auto fullContainer = sim.simulateSubstitutions(msaLength);

        msa.fillSubstitutions(fullContainer);
        std::cout << counter  << "\n";
        
    }
    

    return 0;


}